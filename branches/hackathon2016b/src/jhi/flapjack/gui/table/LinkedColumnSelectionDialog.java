// Copyright 2009-2016 Information & Computational Sciences, JHI. All rights
// reserved. Use is subject to the accompanying licence terms.

package jhi.flapjack.gui.table;

import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;
import javax.swing.table.*;

import jhi.flapjack.data.*;
import jhi.flapjack.gui.*;

import scri.commons.gui.*;

public class LinkedColumnSelectionDialog extends JDialog implements ActionListener
{
	private boolean isOK = false;

	private GTViewSet viewSet;

	public LinkedColumnSelectionDialog(GTViewSet viewSet)
	{
		super(Flapjack.winMain, "Columns To Display", true);

		this.viewSet = viewSet;

		initComponents();

		setBackground((Color)UIManager.get("fjDialogBG"));

		RB.setText(bCancel, "gui.text.cancel");
		RB.setText(bOk, "gui.text.ok");

		bOk.addActionListener(this);
		bCancel.addActionListener(this);
		lblSelectAll.addActionListener(this);
		lblSelectNone.addActionListener(this);

		createTable(viewSet);

		getRootPane().setDefaultButton(bOk);
		SwingUtils.addCloseHandler(this, bCancel);

		pack();
		setLocationRelativeTo(Flapjack.winMain);
		setResizable(false);
		setVisible(true);
	}

	// Builds a simple table model that contains two columns - column 0 has the
	// name of each trait/phenotype, while column 1 contains whether or not that
	// trait has been selected for display
	private void createTable(GTViewSet viewSet)
	{
		String[] columnNames = {
			"Column",
			"Selected"
		};

		Object[][] data = new Object[viewSet.tableHandler().model().getColumnCount()-1][2];

		// Set up the dialog with the column names from the linked table
		for (int i = 0; i < data.length; i++)
		{
			data[i][0] = viewSet.tableHandler().model().getColumnName(i+1);
			data[i][1] = false;
		}

		// If we already have any linkedColumns set those to true to reflect
		// their existing selection state
		for (int i = 0; i < viewSet.getLinkedModelCols().length; i++)
		{
			int index = viewSet.getLinkedModelCols()[i];
			data[index-1][1] = true;
		}

		table.setModel(new DefaultTableModel(data, columnNames)
		{
			public Class getColumnClass(int c) {
				return getValueAt(0, c).getClass();
			}

			// Column 1 contains the tickboxes, and must be editable
			public boolean isCellEditable(int row, int col) {
				return col == 1;
			}
		});

		table.getColumnModel().getColumn(1).setPreferredWidth(10);

		TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>((DefaultTableModel)table.getModel());
		table.setRowSorter(sorter);
	}

	public void actionPerformed(ActionEvent e)
	{
		if(e.getSource() == lblSelectAll)
		{
			for (int i = 0; i < table.getRowCount(); i++)
				table.setValueAt(true, i, 1);
		}

		else if(e.getSource() == lblSelectNone)
		{
			for (int i = 0; i < table.getRowCount(); i++)
				table.setValueAt(false, i, 1);
		}

		else if (e.getSource() == bOk)
		{
			int[] cols = getSelectedColumnIndices();

			// Pass our selected (model) column indices to the viewSet
			viewSet.setLinkedModelCols(cols);

			isOK = true;
			setVisible(false);
		}

		else if (e.getSource() == bCancel)
			setVisible(false);
	}

	private int[] getSelectedColumnIndices()
	{
		// Generate an int array with true/false states for every trait
		ArrayList<Integer> cols = new ArrayList<>();
		for (int i = 0; i < table.getRowCount(); i++)
			if ((Boolean) table.getValueAt(i, 1))
				cols.add(i+1);

		return cols.stream().mapToInt(Integer::intValue).toArray();
	}

	public boolean isOK()
		{ return isOK; }

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        dialogPanel1 = new scri.commons.gui.matisse.DialogPanel();
        bOk = new javax.swing.JButton();
        bCancel = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        lblSelectAll = new scri.commons.gui.matisse.HyperLinkLabel();
        jLabel1 = new javax.swing.JLabel();
        lblSelectNone = new scri.commons.gui.matisse.HyperLinkLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        bOk.setText("Ok");
        dialogPanel1.add(bOk);

        bCancel.setText("Cancel");
        dialogPanel1.add(bCancel);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {

            }
        ));
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane1.setViewportView(table);

        lblSelectAll.setText("Select all");

        jLabel1.setText("|");

        lblSelectNone.setText("Select none");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dialogPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSelectAll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jLabel1)
                        .addGap(5, 5, 5)
                        .addComponent(lblSelectNone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSelectAll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(lblSelectNone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(dialogPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bCancel;
    private javax.swing.JButton bOk;
    private scri.commons.gui.matisse.DialogPanel dialogPanel1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private scri.commons.gui.matisse.HyperLinkLabel lblSelectAll;
    private scri.commons.gui.matisse.HyperLinkLabel lblSelectNone;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}