package flapjack.gui.dialog;

import java.awt.*;
import java.awt.image.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;

import flapjack.gui.*;
import flapjack.gui.visualization.*;
import flapjack.gui.visualization.colors.*;

class NBColorPanel extends JPanel implements ActionListener
{
	private GenotypePanel gPanel;

	private DefaultComboBoxModel comboModel;
	private DefaultListModel standardModel;
	private DefaultListModel schemeModel;

	NBColorPanel(ColorDialog colorDialog, GenotypePanel gPanel)
	{
		this.gPanel = gPanel;

		// NetBeans/GroupLayout setup
		initComponents();

		// i18n text
		RB.setText(comboLabel, "gui.dialog.NBColorPanel.comboLabel");
		infoPanel.setBorder(BorderFactory.createTitledBorder(RB.getString("gui.dialog.NBColorPanel.infoPanel.title")));
		colorPanel.setBorder(BorderFactory.createTitledBorder(RB.getString("gui.dialog.NBColorPanel.colorPanel.title")));
		RB.setText(listLabel1, "gui.dialog.NBColorPanel.listLabel1");
		RB.setText(listLabel2, "gui.dialog.NBColorPanel.listLabel2");

		// Set the cell renderers and mouse listeners on the colour lists
		standardList.setCellRenderer(new ColorListRenderer());
		schemeList.setCellRenderer(new ColorListRenderer());
		addMouseListener(standardList);
		addMouseListener(schemeList);

		// Add the various colour schemes to the combo box
		comboModel = new DefaultComboBoxModel();
		comboModel.addElement(new NucleotideColorScheme());
		comboModel.addElement(new SimpleTwoColorScheme());
		comboModel.addElement(new LineSimilarityColorScheme());
		comboModel.addElement(new MarkerSimilarityColorScheme());
		comboModel.addElement(new RandomColorScheme());
		schemeCombo.setModel(comboModel);
		schemeCombo.addActionListener(this);

		initializeLists();

		// Match the combo box to the current scheme
		int model = gPanel.getViewSet().getColorScheme();
		for (int i = 0; i < comboModel.getSize(); i++)
			if (((ColorScheme)comboModel.getElementAt(i)).getModel() == model)
				schemeCombo.setSelectedIndex(i);
	}

	void initializeLists()
	{
		initStandardList();
		actionPerformed(null);
	}

	private void initStandardList()
	{
		standardModel = new DefaultListModel();

		for (ColorScheme.ColorSummary summary: ColorScheme.getStandardColorSummaries())
			standardModel.addElement(summary);
		standardList.setModel(standardModel);
	}

	// Change the entries in the 'scheme specific' list control based on the
	// selected colour scheme from the combo box
	public void actionPerformed(ActionEvent e)
	{
		ColorScheme cs = (ColorScheme) schemeCombo.getSelectedItem();
		infoText.setText(cs.getDescription());
		infoText.setCaretPosition(0);

		schemeModel = new DefaultListModel();

		for (ColorScheme.ColorSummary summary: cs.getColorSummaries())
			schemeModel.addElement(summary);
		schemeList.setModel(schemeModel);
	}

	// Add mouse listeners to the lists so that a double click fires an event
	private void addMouseListener(final JList list)
	{
		list.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e) {
				if (e.getClickCount() == 2)
					selectColor(list);
			}
		});
	}

	// Pop up a colour chooser and apply the new colour to the selected scheme
	private void selectColor(JList list)
	{
		ColorScheme.ColorSummary c = (ColorScheme.ColorSummary) list.getSelectedValue();
		if (c == null)
			return;

		Color newColor = JColorChooser.showDialog(this, "Select New Colour", c.color);
		if (newColor == null)
			return;

		c.color = newColor;

		// Determine which colour scheme needs to be updated
		if (list == standardList)
			ColorScheme.setStandardColorSummaries(getVector(standardModel));
		else
		{
			ColorScheme cs = ((ColorScheme)schemeCombo.getSelectedItem());
			cs.setColorSummaries(getVector(schemeModel));
		}

		// Refresh screen
		gPanel.setViewSet(gPanel.getViewSet());
	}

	private Vector<ColorScheme.ColorSummary> getVector(DefaultListModel model)
	{
		Vector<ColorScheme.ColorSummary> colors = new Vector<ColorScheme.ColorSummary>();
		for (int i = 0; i < model.size(); i++)
			colors.add((ColorScheme.ColorSummary)model.get(i));

		return colors;
	}

	void resetColors()
	{
		// Reapply the defaults
		Prefs.setColorDefaults();
		// Get the lists in the panel to update with the new colours
		initializeLists();
		// Force an update of the view as new colours may apply there too
		gPanel.setViewSet(gPanel.getViewSet());
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        colorPanel = new javax.swing.JPanel();
        gridPanel = new javax.swing.JPanel();
        javax.swing.JPanel panel1 = new javax.swing.JPanel();
        javax.swing.JScrollPane sp2 = new javax.swing.JScrollPane();
        standardList = new javax.swing.JList();
        listLabel1 = new javax.swing.JLabel();
        javax.swing.JPanel panel2 = new javax.swing.JPanel();
        listLabel2 = new javax.swing.JLabel();
        javax.swing.JScrollPane sp3 = new javax.swing.JScrollPane();
        schemeList = new javax.swing.JList();
        infoPanel = new javax.swing.JPanel();
        javax.swing.JScrollPane sp1 = new javax.swing.JScrollPane();
        infoText = new javax.swing.JTextArea();
        comboLabel = new javax.swing.JLabel();
        schemeCombo = new javax.swing.JComboBox();

        colorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Customize (double click a colour to change it):"));

        gridPanel.setLayout(new java.awt.GridLayout(1, 2, 10, 0));

        panel1.setLayout(new java.awt.BorderLayout(0, 5));

        sp2.setViewportView(standardList);

        panel1.add(sp2, java.awt.BorderLayout.CENTER);

        listLabel1.setLabelFor(standardList);
        listLabel1.setText("Standard colours:");
        panel1.add(listLabel1, java.awt.BorderLayout.NORTH);

        gridPanel.add(panel1);

        panel2.setLayout(new java.awt.BorderLayout(0, 5));

        listLabel2.setLabelFor(schemeList);
        listLabel2.setText("Scheme specific:");
        panel2.add(listLabel2, java.awt.BorderLayout.NORTH);

        sp3.setViewportView(schemeList);

        panel2.add(sp3, java.awt.BorderLayout.CENTER);

        gridPanel.add(panel2);

        org.jdesktop.layout.GroupLayout colorPanelLayout = new org.jdesktop.layout.GroupLayout(colorPanel);
        colorPanel.setLayout(colorPanelLayout);
        colorPanelLayout.setHorizontalGroup(
            colorPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(colorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(gridPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                .addContainerGap())
        );
        colorPanelLayout.setVerticalGroup(
            colorPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(colorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(gridPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                .addContainerGap())
        );

        infoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Information:"));

        sp1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        infoText.setColumns(20);
        infoText.setEditable(false);
        infoText.setLineWrap(true);
        infoText.setRows(5);
        infoText.setWrapStyleWord(true);
        sp1.setViewportView(infoText);

        comboLabel.setLabelFor(schemeCombo);
        comboLabel.setText("Selected colour scheme:");

        org.jdesktop.layout.GroupLayout infoPanelLayout = new org.jdesktop.layout.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
            infoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(infoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(infoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(infoPanelLayout.createSequentialGroup()
                        .add(comboLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(schemeCombo, 0, 295, Short.MAX_VALUE))
                    .add(sp1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE))
                .addContainerGap())
        );
        infoPanelLayout.setVerticalGroup(
            infoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(infoPanelLayout.createSequentialGroup()
                .add(infoPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(comboLabel)
                    .add(schemeCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(sp1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, colorPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, infoPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(infoPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(colorPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel colorPanel;
    private javax.swing.JLabel comboLabel;
    private javax.swing.JPanel gridPanel;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JTextArea infoText;
    private javax.swing.JLabel listLabel1;
    private javax.swing.JLabel listLabel2;
    javax.swing.JComboBox schemeCombo;
    private javax.swing.JList schemeList;
    private javax.swing.JList standardList;
    // End of variables declaration//GEN-END:variables


	static class ColorListRenderer extends JLabel implements ListCellRenderer
	{
		ColorListRenderer()
		{
			// Don't paint behind the component
			setOpaque(true);
		}

		// Set the attributes of the class and return a reference
		public Component getListCellRendererComponent(JList list, Object o,
				int i, boolean iss, boolean chf)
		{
			ColorScheme.ColorSummary summary = (ColorScheme.ColorSummary) o;

			// Set the font
			setFont(list.getFont());

			// Set the text
			setText(summary.name);

			// Set the icon
			BufferedImage image = new BufferedImage(20, 10, BufferedImage.TYPE_INT_RGB);
			Graphics g = image.createGraphics();

			g.setColor(summary.color);
			g.fillRect(0, 0, 20, 10);
			g.setColor(Color.black);
			g.drawRect(0, 0, 20, 10);
			g.dispose();

			setIcon(new ImageIcon(image));

			// Set background/foreground colours
			if (iss)
			{
				setBackground(list.getSelectionBackground());
				setForeground(list.getSelectionForeground());
			} else
			{
				setBackground(list.getBackground());
				setForeground(list.getForeground());
			}

			return this;
		}

		public Insets getInsets(Insets i)
			{ return new Insets(0, 3, 0, 0); }
	}
}
