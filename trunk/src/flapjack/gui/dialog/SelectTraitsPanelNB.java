// Copyright 2009-2012 Information & Computational Sciences, JHI. All rights
// reserved. Use is subject to the accompanying licence terms.

package flapjack.gui.dialog;

import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;
import javax.swing.table.*;

import flapjack.data.*;

import scri.commons.gui.*;

class SelectTraitsPanelNB extends javax.swing.JPanel implements ActionListener
{
	private GTViewSet viewSet;

	public SelectTraitsPanelNB(GTViewSet viewSet)
	{
		initComponents();

		setBackground((Color)UIManager.get("fjDialogBG"));

		this.viewSet = viewSet;

		RB.setText(label, "gui.dialog.NBSelectTraitsPanel.label");
		RB.setText(selectAllLabel, "gui.dialog.NBSelectTraitsPanel.selectAllLabel");
		RB.setText(selectNoneLabel, "gui.dialog.NBSelectTraitsPanel.selectNoneLabel");

		createLinkLabels();
		createTable(viewSet);
	}

	private void createLinkLabels()
	{
		selectAllLabel.addActionListener(this);
		selectNoneLabel.addActionListener(this);
	}

	// Builds a simple table model that contains two columns - column 0 has the
	// name of each trait/phenotype, while column 1 contains whether or not that
	// trait has been selected for display
	private void createTable(GTViewSet viewSet)
	{
		String[] columnNames = {
			RB.getString("gui.dialog.NBSelectTraitsPanel.traitsColumn"),
			RB.getString("gui.dialog.NBSelectTraitsPanel.experimentColumn"),
			RB.getString("gui.dialog.NBSelectTraitsPanel.showColumn")
		};

		ArrayList<Trait> traits = viewSet.getDataSet().getTraits();

		int[] selected = viewSet.getTraits();
		Object[][] data = new Object[traits.size()][3];

		for (int i = 0; i < data.length; i++)
		{
			data[i][0] = traits.get(i).getName();
			data[i][1] = traits.get(i).getExperiment();

			// Search the current list of visible traits to see if this trait
			// is one of them. If it is, enable it in the table
			boolean show = false;
			for (int j = 0; j < selected.length; j++)
				if (selected[j] == i)
					show = true;

			data[i][2] = show;
		}

		table.setModel(new DefaultTableModel(data, columnNames)
		{
			public Class getColumnClass(int c) {
				return getValueAt(0, c).getClass();
			}

			// Column 1 contains the tickboxes, and must be editable
			public boolean isCellEditable(int row, int col) {
				return col == 2;
			}
		});

		table.getColumnModel().getColumn(2).setPreferredWidth(10);

		TableRowSorter<DefaultTableModel> sorter = new
			TableRowSorter<DefaultTableModel>((DefaultTableModel)table.getModel());
		table.setRowSorter(sorter);
	}

	void isOK()
	{
		// Generate a boolean array with true/false states for every trait
		boolean[] array = new boolean[table.getRowCount()];
		for (int i = 0; i < array.length; i++)
			array[i] = (Boolean) table.getValueAt(i, 2);

		int active = 0;
		for (boolean b: array)
			if (b) active++;

		// Copy ONLY the selected traits into a new array
		int[] traits = new int[active];
		for (int i = 0, j = 0; i < array.length; i++)
			if (array[i])
				traits[j++] = i;

		// Assign the selected traits back to the view
		viewSet.setTraits(traits);
	}

	public void actionPerformed(ActionEvent e)
	{
		if(e.getSource() == selectAllLabel)
		{
			for (int i = 0; i < table.getRowCount(); i++)
				table.setValueAt(true, i, 2);
		}

		if(e.getSource() == selectNoneLabel)
		{
			for (int i = 0; i < table.getRowCount(); i++)
				table.setValueAt(false, i, 2);
		}
	}

	/** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        label2 = new javax.swing.JLabel();
        selectAllLabel = new scri.commons.gui.matisse.HyperLinkLabel();
        selectNoneLabel = new scri.commons.gui.matisse.HyperLinkLabel();

        label.setLabelFor(table);
        label.setText("The traits heatmap will display any of the following selected traits:");

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        table.setRowSelectionAllowed(false);
        table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table);

        label2.setText("|");

        selectAllLabel.setText("Select all");

        selectNoneLabel.setText("Select none");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
                    .addComponent(label)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(selectAllLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectNoneLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label2)
                    .addComponent(selectAllLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectNoneLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label;
    private javax.swing.JLabel label2;
    private scri.commons.gui.matisse.HyperLinkLabel selectAllLabel;
    private scri.commons.gui.matisse.HyperLinkLabel selectNoneLabel;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

}