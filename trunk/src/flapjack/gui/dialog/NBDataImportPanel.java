// Copyright 2007-2010 Plant Bioinformatics Group, SCRI. All rights reserved.
// Use is subject to the accompanying licence terms.

package flapjack.gui.dialog;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import javax.swing.*;

import flapjack.gui.*;

import java.util.LinkedList;
import scri.commons.gui.*;
import scri.commons.gui.matisse.HistoryComboBox;

public class NBDataImportPanel extends javax.swing.JPanel implements ActionListener
{
	LinkedList<String> recentMapFiles = new LinkedList<String>();
	LinkedList<String> recentGenoFiles = new LinkedList<String>();

	public NBDataImportPanel()
	{
		initComponents();

		setBackground((Color)UIManager.get("fjDialogBG"));
		filePanel.setBackground((Color)UIManager.get("fjDialogBG"));
		optionPanel.setBackground((Color)UIManager.get("fjDialogBG"));

		mapButton.addActionListener(this);
		genoButton.addActionListener(this);
		checkUseHetSep.addActionListener(this);

		mapComboBox.setHistory(Prefs.guiMapList);
		genoComboBox.setHistory(Prefs.guiGenoList);

		missingText.setText(Prefs.ioMissingData);
		heteroText.setText(Prefs.ioHeteroSeparator);
		checkHetero.setSelected(Prefs.ioHeteroCollapse);
		checkUseHetSep.setSelected(Prefs.ioUseHetSep);
		checkMarkers.setSelected(Prefs.ioMakeAllChromosome);

		// Apply localized text
		filePanel.setBorder(BorderFactory.createTitledBorder(RB.getString("gui.dialog.NBDataImportPanel.filePanel")));
		RB.setText(mapLabel, "gui.dialog.NBDataImportPanel.mapLabel");
		mapButton.setText(RB.getString("gui.text.browse"));
		RB.setText(genoLabel, "gui.dialog.NBDataImportPanel.genoLabel");
		genoButton.setText(RB.getString("gui.text.browse"));
		optionPanel.setBorder(BorderFactory.createTitledBorder(RB.getString("gui.dialog.NBDataImportPanel.optionPanel")));
		RB.setText(checkMarkers, "gui.dialog.NBDataImportPanel.checkMarkers");
		RB.setText(markersLabel, "gui.dialog.NBDataImportPanel.markersLabel");
		RB.setText(checkUseHetSep, "gui.dialog.NBDataImportPanel.checkUseHetSep");
		RB.setText(missingLabel, "gui.dialog.NBDataImportPanel.missingLabel");
		RB.setText(heteroLabel, "gui.dialog.NBDataImportPanel.heteroLabel");
		RB.setText(checkHetero, "gui.dialog.NBDataImportPanel.checkHetero");

		setLabelStates();

		mapComboBox.addActionListener(this);
		genoComboBox.addActionListener(this);
	}

	public void actionPerformed(ActionEvent e)
	{
		if (e.getSource() == mapButton)
			browse(mapComboBox, recentMapFiles);

		else if (e.getSource() == genoButton)
			browse(genoComboBox, recentGenoFiles);

		else if (e.getSource() == checkUseHetSep)
			setLabelStates();
	}

	private void browse(HistoryComboBox combo, LinkedList<String> recentFiles)
	{
		JFileChooser fc = new JFileChooser();
		fc.setDialogTitle(RB.getString("gui.dialog.NBDataImportPanel.fcTitle"));
		fc.setCurrentDirectory(new File(Prefs.guiCurrentDir));

		if (combo.getText().length() > 0)
			fc.setCurrentDirectory(new File(combo.getText()));

//		Filters.setFilters(fc, -1, FAS, PHY_S, PHY_I, ALN, MSF, NEX, NEX_B);

		if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
		{
			File file = fc.getSelectedFile();
			Prefs.guiCurrentDir = fc.getCurrentDirectory().toString();

			combo.updateComboBox(file.toString());
		}
	}

	boolean isOK()
	{
		if (mapComboBox.getText().length() == 0 || genoComboBox.getText().length() == 0)
		{
			TaskDialog.warning(
				RB.getString("gui.dialog.NBDataImportPanel.warn1"),
				RB.getString("gui.text.ok"));
			return false;
		}

		Prefs.ioMissingData = missingText.getText();
		Prefs.ioHeteroSeparator = heteroText.getText();
		Prefs.ioHeteroCollapse = checkHetero.isSelected();
		Prefs.ioUseHetSep = checkUseHetSep.isSelected();
		Prefs.ioMakeAllChromosome = checkMarkers.isSelected();

		return true;
	}

	File getMapFile()
	{
		return new File(mapComboBox.getText());
	}

	File getGenotypeFile()
	{
		return new File(genoComboBox.getText());
	}

	private void setLabelStates()
	{
		heteroLabel.setEnabled(checkUseHetSep.isSelected());
		heteroText.setEnabled(checkUseHetSep.isSelected());
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filePanel = new javax.swing.JPanel();
        mapLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        mapComboBox = new scri.commons.gui.matisse.HistoryComboBox();
        mapButton = new javax.swing.JButton();
        genoLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        genoComboBox = new scri.commons.gui.matisse.HistoryComboBox();
        genoButton = new javax.swing.JButton();
        optionPanel = new javax.swing.JPanel();
        heteroLabel = new javax.swing.JLabel();
        heteroText = new javax.swing.JTextField();
        checkHetero = new javax.swing.JCheckBox();
        missingLabel = new javax.swing.JLabel();
        missingText = new javax.swing.JTextField();
        checkUseHetSep = new javax.swing.JCheckBox();
        checkMarkers = new javax.swing.JCheckBox();
        markersLabel = new javax.swing.JLabel();

        filePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Data files to import:"));

        mapLabel.setLabelFor(mapComboBox);
        mapLabel.setText("Map file:");

        jPanel2.setLayout(new java.awt.BorderLayout());
        jPanel2.add(mapComboBox, java.awt.BorderLayout.CENTER);

        mapButton.setText("Browse...");

        genoLabel.setLabelFor(genoComboBox);
        genoLabel.setText("Genotype file:");

        jPanel1.setLayout(new java.awt.BorderLayout());
        jPanel1.add(genoComboBox, java.awt.BorderLayout.CENTER);

        genoButton.setText("Browse...");

        javax.swing.GroupLayout filePanelLayout = new javax.swing.GroupLayout(filePanel);
        filePanel.setLayout(filePanelLayout);
        filePanelLayout.setHorizontalGroup(
            filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(genoLabel)
                    .addComponent(mapLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 310, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(genoButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mapButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        filePanelLayout.setVerticalGroup(
            filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(mapLabel)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mapButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(filePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(genoLabel)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(genoButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        optionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Additional options:"));

        heteroLabel.setLabelFor(heteroText);
        heteroLabel.setText("Heterozygous separator string:");

        heteroText.setColumns(4);

        checkHetero.setText("Don't distinguish between heterozyous alleles (treats A/T the same as T/A)");

        missingLabel.setLabelFor(missingText);
        missingLabel.setText("Missing data string:");

        missingText.setColumns(4);

        checkUseHetSep.setText("Expect heteozygotes to be separated by a string (A/T rather than AT)");

        checkMarkers.setText("Duplicate all markers onto a single \"All Chromosomes\" chromosome for side-by-side viewing");

        markersLabel.setText("(not recommended if you have a large number of markers)");

        javax.swing.GroupLayout optionPanelLayout = new javax.swing.GroupLayout(optionPanel);
        optionPanel.setLayout(optionPanelLayout);
        optionPanelLayout.setHorizontalGroup(
            optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(optionPanelLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(markersLabel))
                    .addComponent(checkMarkers)
                    .addComponent(checkUseHetSep)
                    .addComponent(checkHetero)
                    .addGroup(optionPanelLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(heteroLabel)
                            .addComponent(missingLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(missingText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(heteroText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        optionPanelLayout.setVerticalGroup(
            optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(checkMarkers)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(markersLabel)
                .addGap(18, 18, 18)
                .addComponent(checkHetero)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkUseHetSep)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(heteroLabel)
                    .addComponent(heteroText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(missingText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(missingLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(optionPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(filePanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(optionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkHetero;
    private javax.swing.JCheckBox checkMarkers;
    private javax.swing.JCheckBox checkUseHetSep;
    private javax.swing.JPanel filePanel;
    private javax.swing.JButton genoButton;
    scri.commons.gui.matisse.HistoryComboBox genoComboBox;
    private javax.swing.JLabel genoLabel;
    private javax.swing.JLabel heteroLabel;
    private javax.swing.JTextField heteroText;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton mapButton;
    scri.commons.gui.matisse.HistoryComboBox mapComboBox;
    private javax.swing.JLabel mapLabel;
    private javax.swing.JLabel markersLabel;
    private javax.swing.JLabel missingLabel;
    private javax.swing.JTextField missingText;
    private javax.swing.JPanel optionPanel;
    // End of variables declaration//GEN-END:variables

}